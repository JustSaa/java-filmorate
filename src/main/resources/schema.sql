DROP TABLE IF EXISTS
users,
user_friends,
film_genres,
films,
film_likes,
genre,
mpa,
CASCADE;

CREATE TABLE IF NOT EXISTS PUBLIC.users (
id INTEGER,
email VARCHAR(255) NOT NULL,
login VARCHAR(255) NOT NULL,
name VARCHAR(255),
birthdate DATE,
CONSTRAINT pk_user_id PRIMARY KEY (id)
);
CREATE UNIQUE index if not exists USER_EMAIL_UINDEX on users (email);
CREATE UNIQUE index if not exists USER_LOGIN_UINDEX on users (login);

CREATE TABLE IF NOT EXISTS PUBLIC.user_friends (
user_id INTEGER,
friend_id INTEGER,
status BOOLEAN,
CONSTRAINT pk_user_id_for_user FOREIGN KEY (user_id) REFERENCES PUBLIC.users(id) ON DELETE CASCADE ON UPDATE RESTRICT,
CONSTRAINT pk_friend_id_for_user FOREIGN KEY (friend_id) REFERENCES PUBLIC.users(id) ON DELETE CASCADE ON UPDATE RESTRICT
);

CREATE TABLE IF NOT EXISTS PUBLIC.genre (
id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
name VARCHAR(15)
);

CREATE TABLE IF NOT EXISTS PUBLIC.mpa (
id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
rating VARCHAR(15)
);

CREATE TABLE IF NOT EXISTS PUBLIC.films (
id INTEGER PRIMARY KEY,
name VARCHAR(255) NOT NULL,
description VARCHAR(200),
releaseDate DATE,
duration INTEGER,
rate INTEGER,
mpa_id INTEGER REFERENCES PUBLIC.mpa(id) ON DELETE CASCADE ON UPDATE RESTRICT
);

CREATE TABLE IF NOT EXISTS PUBLIC.film_genres (
film_id INTEGER REFERENCES PUBLIC.films(id) ON DELETE CASCADE ON UPDATE RESTRICT,
genre_id INTEGER REFERENCES PUBLIC.genre(id) ON DELETE CASCADE ON UPDATE RESTRICT
);

CREATE TABLE IF NOT EXISTS PUBLIC.film_likes (
film_id INTEGER REFERENCES PUBLIC.films(id) ON DELETE CASCADE ON UPDATE RESTRICT,
user_id INTEGER REFERENCES PUBLIC.users(id) ON DELETE CASCADE ON UPDATE RESTRICT
);